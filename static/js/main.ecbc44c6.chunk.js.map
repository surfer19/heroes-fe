{"version":3,"sources":["redux/gnomeListActions.js","redux/GnomeListReducer.js","redux/reducers.js","redux/configureStore.js","components/GnomeNav/index.js","components/GnomeItem/index.js","components/GnomeList/index.js","components/GnomeDetail/selectors.js","components/GnomeTable/index.js","components/GnomeDetail/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["FETCH_GNOMES_BEGIN","FETCH_GNOMES_SUCCESS","FETCH_GNOMES_FAILURE","defaultState","allGnomes","gnomeListReducer","state","action","type","payload","rootReducer","combineReducers","configureStore","initialState","createStore","compose","applyMiddleware","thunk","logger","cacheEnhancer","log","GnomeNav","props","toggle","bind","isOpen","this","setState","Navbar","color","light","expand","className","NavbarBrand","src","width","alt","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","href","target","React","Component","GnomeItem","to","gnome","id","Card","CardImg","top","thumbnail","CardBody","CardTitle","name","CardSubtitle","age","CardText","gnomeProfs","professions","profLength","length","map","prof","i","key","getProfessions","GnomeList","loadMore","gnomesToLoad","fetchAllGnomes","toLoad","nextNotLoadedItems","slice","concat","pageStart","loadMoreGnomes","hasMore","useWindow","threshold","loader","Spinner","style","position","height","transform","left","connect","dispatch","a","axios","get","response","data","console","Brastlewark","err","error","selectItems","selectItemById","createSelector","itemId","items","selectFriendNameByItem","item","friends","selectFriendsIdsById","names","nameIdPairs","GnomeTable","Table","borderless","icons","colIcons","suffixes","suffixMessages","gnomeFriends","rows","Object","entries","forEach","prop","undefined","propTd","Array","isArray","spans","propItem","push","getIconByKey","generateRows","GnomeDetail","gnomeData","gnomeRaw","weight","Math","floor","gender","random","firstName","replace","aria-hidden","hair_color","process","match","params","store","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ecbc44c6.chunk.js","sourcesContent":["// import mockData from \"../mocks/mock-gnomes.json\";\nimport axios from \"axios\";\n\n/*\n * CONSTANTS\n */\n\n// fetch gnomes\nexport const FETCH_GNOMES_BEGIN = \"FETCH_GNOMES_BEGIN\"; // TODO: loading\nexport const FETCH_GNOMES_SUCCESS = \"FETCH_GNOMES_SUCCESS\";\nexport const FETCH_GNOMES_FAILURE = \"FETCH_GNOMES_FAILURE\"; //TODO:\n\n/*\n * FUNCTIONS\n */\n\n// fetch gnomes\nexport const fetchAllGnomes = () => {\n    return async dispatch => { //         \n        try {\n            dispatch(fetchAllGnomesBegin())\n            // for testing purpose\n            // setTimeout(async() => {\n            // call api\n            const response = (await axios.get(\n                \"http://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\"\n            )).data;\n            console.log('response', response.data)\n            // const response = mockData;\n            // success\n            dispatch(fetchAllGnomesSuccess(response))\n            // }, 1000)\n        } catch (err) {\n            dispatch(fetchAllGnomesFailure(err))\n        }\n    }\n}\n\nfunction fetchAllGnomesBegin() {\n    return  {\n        type: FETCH_GNOMES_BEGIN\n    }\n}\n\nfunction fetchAllGnomesSuccess(responseData) {\n    return {\n        type: FETCH_GNOMES_SUCCESS,\n        payload: responseData.Brastlewark\n    }\n}\n\nfunction fetchAllGnomesFailure(err) {\n    return {\n        type: FETCH_GNOMES_FAILURE,\n        error: err\n    }\n}\n","import { \n    FETCH_GNOMES_BEGIN, \n    FETCH_GNOMES_SUCCESS, \n    FETCH_GNOMES_FAILURE \n} from \"./gnomeListActions\";\n\nconst defaultState = {\n    allGnomes: []\n}\n\nconst gnomeListReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case FETCH_GNOMES_BEGIN:\n            return {\n                ...state\n            }\n        case FETCH_GNOMES_SUCCESS:\n            return {\n                ...state,\n                allGnomes: action.payload\n            }\n        case FETCH_GNOMES_FAILURE:\n            return {\n                ...state\n            }\n        default: \n            return state\n    }\n}\n\nexport default gnomeListReducer;","import { combineReducers } from 'redux';\n\nimport gnomeListReducer from \"./GnomeListReducer\";\n\nconst rootReducer = combineReducers({\n\tgnomeListReducer\n});\n\nexport default rootReducer;","import { createStore, compose, applyMiddleware } from 'redux'\nimport { cacheEnhancer } from 'redux-cache'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\nimport logger from 'redux-logger'\n\n\nconst configureStore = (initialState = {}) => \n    createStore(\n        rootReducer,\n        initialState,\n        compose(\n            applyMiddleware(thunk, logger),\n            cacheEnhancer({ log: true }),            \n            // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n        )\n    );\n\n\nexport default configureStore;","import React from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink } from 'reactstrap';\n\nexport default class GnomeNav extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <div className=\"container\">\n          <NavbarBrand>\n            <img src=\"./images/gnome.svg\" width=\"50px\" alt=\"logo\"/>\n             Brastlewark\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>              \n              <NavItem>\n                <NavLink href=\"https://github.com/surfer19/heroes-fe\" target=\"_blank\">GitHub</NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n          </div>\n        </Navbar>        \n      </div>\n    );\n  }\n}","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport {\n  Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle\n} from 'reactstrap';\n// custom css\nimport './index.css'\n\nconst GnomeItem = (props) => {\n\n    const getProfessions = props => {\n        const gnomeProfs = props.gnome.professions\n        const profLength = gnomeProfs.length;\n        if (profLength === 0) return 'None'\n        return gnomeProfs.map((prof, i) => {\n            return (\n                <span key={i}> {prof}\n                    { profLength !== i + 1 ? ', ' : null}\n                </span>\n            )\n        })\n    }\n    return (\n        <Link to={`/detail/${props.gnome.id}`}>\n            <Card className=\"shadow\">\n                <CardImg top width=\"100%\" src={props.gnome.thumbnail} alt=\"Card image cap\" />\n                <CardBody>\n                    <CardTitle>\n                        {props.gnome.name}\n                    </CardTitle>\n                    <CardSubtitle>Age: {props.gnome.age}</CardSubtitle>\n                    <CardText>\n                        Professions: {getProfessions(props)} \n                    </CardText>\n                </CardBody>\n            </Card>\n        </Link>\n    );\n};\n\nexport default GnomeItem;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\"\nimport GnomeItem from \"../GnomeItem\"\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport \"./index.css\"\n\nimport { fetchAllGnomes } from '../../redux/gnomeListActions';\nimport { Spinner } from 'reactstrap';\n\nclass GnomeList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            loadMore: true,\n            gnomesToLoad: []\n        }\n    }\n    componentDidMount() {\n        this.props.fetchAllGnomes();\n    }\n\n    loadMoreGnomes() {\n        const toLoad = this.state.gnomesToLoad.length\n        const nextNotLoadedItems = this.props.allGnomes.slice(\n            toLoad,\n            toLoad + 20\n        );\n\n        if (toLoad >= this.props.allGnomes.length) {\n            this.setState({\n                gnomesToLoad: this.state.gnomesToLoad,\n                loadMore: false\n            });\n            return;\n        }\n        this.setState({\n            gnomesToLoad: this.state.gnomesToLoad.concat(nextNotLoadedItems),\n            loadMore: true\n        });\n    }\n    \n    render() {\n        if(this.props.allGnomes.length > 0) {\n            return (\n                    <InfiniteScroll\n                        className=\"row\"\n                        pageStart={0}\n                        loadMore={this.loadMoreGnomes.bind(this)}\n                        hasMore={this.state.loadMore}\n                        useWindow={true}\n                        threshold={100}\n                        loader={\n                            <div className=\"loader\" key={0}>                                \n                                <Spinner color=\"warning\" key=\"0\" className=\"spinner\"/>                                \n                            </div>}>\n                            \n                        {this.state.gnomesToLoad.map((gnome, i) => (\n                            <div className=\"col-12 col-sm-6 col-md-4 col-xl-3 mt-4\" key={i}>\n                                <GnomeItem gnome={gnome}/>\n                            </div>\n                        ))}          \n                    </InfiniteScroll>\n            )\n        } else {\n            return (\n                <div>\n                    <Spinner color=\"dark\" type=\"grow\" style={{\n                        position: \"fixed\",\n                        width:\"4rem\",\n                        height: \"4rem\",\n                        transform: \"translateX(-50%,-50%)\",\n                        top: \"50%\",\n                        left: \"50%\"\n                    }}/>\n                </div>\n            )\n        }\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch) => ({\n    fetchAllGnomes: () => dispatch(fetchAllGnomes())\n})\n\nconst mapStateToProps = state => {\n    return {\n        allGnomes: state.gnomeListReducer.allGnomes\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GnomeList);\n\nGnomeList.propTypes = {\n    gnomes: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            name: PropTypes.string.isRequired,\n            thumbnail: PropTypes.string.isRequired,\n            age: PropTypes.number.isRequired,\n            weight: PropTypes.number.isRequired,\n            height: PropTypes.number.isRequired,\n            hair_color: PropTypes.number.isRequired,\n            professions: PropTypes.arrayOf(PropTypes.string),\n            friends: PropTypes.arrayOf(PropTypes.string)\n        })\n    )\n}","import { createSelector } from 'reselect'\n\nconst selectItems = state => state.gnomeListReducer.allGnomes\nconst selectId = (state, itemId) => itemId; \n\nexport const selectItemById = createSelector( \n  [selectItems, selectId],\n   (items, id) => items[id]\n)\n\nconst selectFriendNameByItem = createSelector(\n  [selectItemById],\n   (item) => item.friends\n)\n\nexport const selectFriendsIdsById = createSelector(\n  [selectItems, selectFriendNameByItem],\n   (items, names) => {\n        let nameIdPairs = {};\n        // assign when we find match\n        items.map(item => {\n            names.map(name => {\n                if (item.name === name) {\n                    nameIdPairs[name] = item.id\n                }\n            })\n        })\n        return nameIdPairs\n    }\n)\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Table } from 'reactstrap';\n\nconst GnomeTable = (props) => {\n\n    const getIconByKey = (icons, key) => {\n        return <i className={`fa ${icons[key]}`}></i>\n    }\n    /*\n     * TODO: split function to components GnomeTableRow and GnomeTableRow\n     */\n    const generateRows = () => {\n        const { gnome, colIcons: icons, suffixMessages: suffixes, gnomeFriends } = props\n        \n        let rows = []\n        {Object.entries(gnome).forEach(([key, prop]) => {\n            // some properties wont be show\n            if (icons[key] === undefined) {\n                return;\n            }\n            // column with property \n            let propTd;\n            // array property\n            if (Array.isArray(prop)) {\n                let spans = prop.map((propItem, id) => {\n                    return (key === 'friends')\n                        // generate link\n                        ? <Link to={`/detail/${gnomeFriends[propItem]}`} key={id}>{propItem} </Link>\n                        // generate string\n                        : <span key={id}>{propItem} </span>\n                })\n                // prop array is empty\n                if (!spans.length) {\n                    spans = <span>Gnome has no {key}</span>\n                }\n                propTd = <td>{spans}</td>\n            }\n            // string/number property\n            else {\n                propTd = <td>{prop} {suffixes[key]}</td>\n            }\n            // push final row to array\n            rows.push(\n                <tr key={key}>\n                    <td className=\"ico\">\n                        {getIconByKey(icons, key)}\n                    </td>\n                    {propTd}\n                </tr>\n            )\n        })}\n        return rows\n    }\n    \n    return (        \n        <Table borderless>\n            <tbody>\n                {generateRows(props)}\n            </tbody>\n        </Table>\n    );\n};\n\nexport default GnomeTable;","import React from 'react'\nimport { connect } from \"react-redux\"\nimport { selectItemById, selectFriendsIdsById } from \"./selectors\"\nimport { hot } from 'react-hot-loader/root'\nimport { Link } from \"react-router-dom\"\nimport GnomeTable from \"../GnomeTable/index\"\nimport \"./index.css\"\n\nclass GnomeDetail extends React.Component {\n    componentDidMount() {}\n    render () {\n        if (!this.props.gnomeData) {\n            return (\n                <div>Something went wrong! <br/>\n                    <Link className=\"btn btn-outline-dark\" to='/'>Return to main page </Link>\n                </div>\n            )\n        }\n        const gnomeRaw = this.props.gnomeData;\n        const gnome = {\n            ...gnomeRaw,\n            weight: Math.floor(gnomeRaw.weight),\n            height: Math.floor(gnomeRaw.height),\n            gender: Math.random() >= 0.5 ? \"Boy\" : \"Girl\",\n            // parse from whole name\n            firstName: gnomeRaw.name.replace(/ .*/,'')\n        }\n        const iconsColOne = {\n            age: 'fa-birthday-cake',\n            weight: 'fa-balance-scale',\n            height: 'fa-arrows-v',\n            hair_color: 'fa-user',\n            gender: 'fa-venus-mars'    \n        }\n        const iconsColTwo = {\n            professions: 'fa-briefcase',\n            friends: 'fa-users',\n        }\n        const suffixMessages = {\n            age: 'y.o.',\n            weight: 'kg',\n            height: 'cm',\n            hair_color: 'hair color',\n        }\n        \n        return (\n            \n        <div className=\"row py-5 px-4\">\n            <div className=\"col-12 col-xl-10 mx-auto\">\n                <div className=\"bg-white shadow rounded \">\n                    <div className=\"px-4 pt-0 pb-4 bg-dark\">\n                        <Link to={'/'} className=\"btn btn-dark btn-sm mt-4\">\n                            <i className=\"fa fa-chevron-left\"></i>\n                        </Link>\n                        <div className=\"media align-items-end profile-header\">\n                            <div className=\"profile mr-3\">\n                                <img src={gnome.thumbnail} alt=\"...\" width=\"150\" className=\"rounded mb-2 img-thumbnail\"/>                                \n                            </div>\n                            <div className=\"media-body mb-5 text-white\">\n                                <h4 className=\"mt-0 mb-0\">{gnome.name}</h4>\n                                <p className=\"small mb-4\"> \n                                <i className=\"fa fa-map-marker mr-2\" aria-hidden=\"true\"></i>\n                                    Brastlewark\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                    <div className=\"bg-light pl-4 pt-5 pb-5 pr-4\">\n                        <h3 className=\"mt-3\">Gnome info:</h3>\n                        <div className=\"row\">\n                            <div className=\"col-12 col-md-3\">\n                                <GnomeTable gnome={gnome} colIcons={iconsColOne} suffixMessages={suffixMessages}/>\n                            </div>\n                            <div className=\"col-12 col-md-9\">\n                                <GnomeTable gnome={gnome} colIcons={iconsColTwo} gnomeFriends={this.props.gnomeFriends}/>\n                            </div>\n                        </div>\n                        <Link to={'/'} className=\"btn btn-dark btn-sm float-right\">\n                            Back\n                        </Link>\n                    </div>                \n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        gnomeData: selectItemById(state, props.match.params.id),\n        gnomeFriends: selectFriendsIdsById(state, props.match.params.id)\n    }\n}\n\nexport default process.env.NODE_ENV === \"development\"  \n    ? hot(connect(mapStateToProps)(GnomeDetail)) \n    : connect(mapStateToProps)(GnomeDetail)","import React from 'react';\nimport { Provider } from 'react-redux';\nimport configureStore from '../../redux/configureStore';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport GnomeNav from \"../GnomeNav/index\"\nimport './App.css';\n\nimport GnomeList from \"../GnomeList/index\";\nimport GnomeDetail from \"../GnomeDetail/index\"\n\nconst store = configureStore()\n\nfunction App() {\n  return (\n    <div>\n      <GnomeNav/>\n      <div className=\"container\">\n        <Provider store={store}>\n          <Router>\n            <Route exact path=\"/\" component={GnomeList} />\n            <Route path=\"/detail/:id\" component={GnomeDetail} />\n          </Router>\n        </Provider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}